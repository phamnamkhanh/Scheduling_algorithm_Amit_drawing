/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package scheduling_algorithm;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;

/**
 *
 * @author namkhanh
 */
public class Scheduling_algorithm_1 {

    /**
     * @param args the command line arguments
     */
        
    public static void main(String[] args) {
        // TODO code application logic here
        //VSL VSL0 = new VSL();
        double[] time= new double[10];
        double[] energy= new double[10];
        int j,n_task=0;
        String [] task_graph_string = null, comm_graph_string = null; 
        File tgff_file = new File("../experiment/lan29/simple.tgff");
        if (!tgff_file.isFile())
            {
                System.out.println("Check file name");      
            }  
        try {
            Scanner scan = new Scanner(tgff_file);
            String line = "";
            while (scan.hasNextLine()) {
                line = scan.nextLine();
                if (line.contains("@TASK_GRAPH"))
                    n_task++;
            }
                
            System.out.println(n_task);   
            
            scan = new Scanner(tgff_file);
            task_graph_string = new String [n_task];
            comm_graph_string = new String [n_task];
            
            j = 0;
            
            while (scan.hasNextLine()) {
                line = scan.nextLine();
                if (line.contains("@TASK_GRAPH"))
                    while (scan.hasNextLine()) {
                        task_graph_string[j] = task_graph_string[j] + line + "\n";
                        line = scan.nextLine();
                        if (line.startsWith("}")){
                            System.out.println("break");
                            j++;
                            break;

                        }

                    }

                if (line.contains("@COMP"))
                    while (scan.hasNextLine()) {
                        comm_graph_string[j-10] = comm_graph_string[j-10] + line + "\n";
                        line = scan.nextLine();
                        if (line.contains("}")){
                            System.out.println("break");
                            j++;
                            break;
                        }
                    }
                }
            
                for (j =0; j < n_task;j++){
                    
                }
            
                      
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Scheduling_algorithm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // new deadline from my version when a=10; lan 18
     // int[] S ={45,65,43,42,57,55,73,29,51,52}; 
        // new deadline from my version when a=10; lan 28
  //   int[] S ={79,85,82,88,99,100,90,88,77,120}; 
        // new deadline from my version when a=10; lan 19
  //   int[] S ={116,137,85,145,136,151,131,120,131,108}; 
       // new deadline from my version when a=10; lan 23
   //  int[] S ={156,134,181,161,148,176,156,145,187,163};
         // new deadline from my version when a=1; lan 29
       int[] S ={185,170,184,198,190,204,205,211,219,206};
      int[] ilp= new int[10]; 
       for (int l=0;l<10;l++){
       Graph graph = new Graph();    
     constructGraph(graph,task_graph_string[l],comm_graph_string[0]);
   //  inputGraph1(graph);
       
       //Giai thuat
     // algorithm al = new algorithm(graph);
       //algorithm.schedule();
       schedule sc= new schedule(graph,8);
       //al.compute_adj();
       //al.compute_b_L();
       //al.compute_path();
       //al.findCriticalPath();
      // int[] a=new int[graph.nVerts];
      // a=sc.createNodeList();
       sc.dynamic_schedule(); 
  
  
    
    int n=graph.nVerts;  
    int[] W = new int [n];
  int[] ET= new int [n];
  int[] RT= new int [n];
   int sumWeight=0;
  for (int i=0;i<graph.nVerts;i++)
  {
   W[i]=graph.vertexList[i].weight;
   ET[i]=(int)graph.vertexList[i].comp_time;
   RT[i]=graph.vertexList[i].weight;
   sumWeight= sumWeight+W[i]*RT[i];
  }
    
    
           //write to file
 
  try{
  // Create file 
     
  FileWriter fstream = new FileWriter("../experiment/lan29/ilp1/ilp"+l+"_"+n+".lp");
  BufferedWriter out = new BufferedWriter(fstream);
 // out.write("Time   Energy"+"\r\n");
 // out.write("number of task: " + graph.nVerts + "\r\n");

  
  
  int[][] succ=new int[n][n];
    for (int i=0;i<n;i++)
        {
            for (j=0;j<n;j++)
        {
        succ[i][j]= (int)graph.adjMat[i][j];
        }
          }    
  // initial placement 
//       int s=S[l];
     int s=(int)graph.makespan;
        int i=0;
        int[][] EOV= new int[n][n];
        for (i=0;i<n;i++)
          for (j=0;j<n;j++)
            {
              if ( (graph.vertexList[i].processor<=graph.vertexList[j].processor && graph.vertexList[i].processor+W[i]-1>=graph.vertexList[j].processor)
            ||( (graph.vertexList[i].processor<=graph.vertexList[j].processor+W[j]-1) && ((graph.vertexList[i].processor+W[i]-1)>=(graph.vertexList[j].processor+W[j]-1))))
                EOV[i][j]=1;  
            }
         
        
        
        
        
  // variable
        int[] rt,b,rhat;
        int[] et = new int[n];
        for (i=0;i<n;i++)
        {
        et[i]=(int)graph.vertexList[i].ast;
        }
        
        int[][] rbar= new int[n][n];
        int[][] z= new int[n][n];
   
    // objective function
        out.write("/*objective function*/  \r\n");
        out.write("min : ");
        for (j=0;j<n;j++)
        {
         // objective without weight - like paper 1    
    //    if (j==n-1) out.write("et"+j+ " - "+"rt"+j+  "; ");
    //  else out.write("et"+j+ " - "+"rt"+j+" + ");  
         // objective with weight   
        if (j==n-1) out.write(W[j]+"et"+j+ " - "+W[j]+"rt"+j+"-"+ sumWeight+ "; ");
       else out.write(W[j]+"et"+j+ " - "+W[j]+"rt"+j+" + ");
        }          
        out.write("\r\n"); 
        
  // constraints
        // constraint 2+ 15
       out.write("/*constraint 2+ 15*/   \r\n");  
        for (j=0;j<n;j++)
        {
         out.write("et"+j+" + "+ET[j]+" <= " +s+";\r\n");
        }      
   
        // constraint 3+16
       out.write("/*constraint 3+16*/  \r\n");  
       for (i=0;i<n;i++)
        {
            for (j=0;j<n;j++)
        {
           if (succ[i][j]==1) {
              out.write("et"+i+" + "+ET[i]+" <= " +"et"+j+";  \r\n");  
           }
        }
        }   
  
          // constraint 4+ 17
       out.write("/*constraint  4+ 17*/  \r\n");
        for (j=0;j<n;j++)
        {
         out.write("rt"+j+" + "+RT[j]+" <= " +"et"+j+";  \r\n");
        }  
  
        // constraint 5+18
         out.write("/*constraint 5+18*/  \r\n");
       for (i=0;i<n;i++)
        {
            for (j=0;j<n;j++)
        {
           if ((EOV[i][j]==1)&&(et[i]<et[j])) {
              out.write("et"+i+" + "+ET[i]+" <= " +"rt"+j+";  \r\n");  
           }
        }
        }  
  
        // constraint 6,7-23,24
       out.write("/*constraint 6,7-23,24*/  \r\n");
        for (i=0;i<n;i++)
        {
            for (j=0;j<n;j++)
        {     
           if (i!=j)
           {out.write("rt"+i+" + "+RT[i]+" <= " +"rt"+j+ " + "+s +" - "+ s+"rbar"+i+j+" + "+ s+"z"+i+j+ ";  \r\n");  
              out.write("rt"+j+" + "+RT[j]+" <= " +"rt"+i+ " + "+ 2*s +" - "+ s+"rbar"+i+j+" - "+ s+"z"+i+j+ ";  \r\n");  
           }    
        }
        }  
       
          // constraint 8+ 19
        out.write("/*constraint 8+ 19*/  \r\n");
        for (j=0;j<n;j++)
        {
         out.write( RT[j]+"rhat"+j+ " - "+ "rt"+j+           " <= " +RT[j]+";  \r\n");
        }
       // constraint 9+ 20
        out.write("/*constraint 9+ 20*/  \r\n");
        for (j=0;j<n;j++)
        {
         out.write("rt"+j+ " - "+(s-RT[j]+1)+"rhat"+j+ " <= " +"-1"+";  \r\n");
        } 
        
         // constraint 10,11-21,22
         out.write("/*constraint 10,11-21,22*/  \r\n");
        for (i=0;i<n;i++)
        {
            for (j=0;j<n;j++)
        {
           
              out.write("rbar"+i+j+" - "+"rhat"+i+" - "+"rhat"+j+" <= 0 ;\r\n");  
              out.write("rhat"+i+" + "+"rhat"+j+" - "+2+"rbar"+i+j+" <= 0 ;\r\n");
        }
        }  
        
        // constraint 12+ 25
        out.write("/*constraint 12+ 25*/  \r\n");
        for (j=0;j<n;j++)
        {
         out.write("rt"+j+" - "+s+"b"+j+ " <= " +(-RT[j])+";  \r\n");
        } 
        
         // constraint 13+ 26
        out.write("/*constraint 13+ 26*/  \r\n");
        for (j=0;j<n;j++)
        {
         out.write(s+"b"+j+" - "+"rhat"+j+ " <= " +(s-1)+";  \r\n");
        }  
        // constraint 14+ 27
        out.write("/*constraint 14+ 27*/  \r\n");
        for (j=0;j<n;j++)
        {
         out.write(" - "+"rt"+j+ " <= " +RT[j]+";  \r\n");
        } 
        
        // integer variable
        out.write("/*rt*/  \r\n");
         out.write("int ");
        for (j=0;j<n;j++)
        {if (j==n-1) out.write("rt"+j+"; ");
        else out.write("rt"+j+", ");
        } 
        out.write("\r\n");
        
        out.write("/*et*/  \r\n");
         out.write("int ");
        for (j=0;j<n;j++)
        {if (j==n-1) out.write("et"+j+"; ");
        else out.write("et"+j+", ");
        } 
       
        out.write("\r\n");
        
         // binary variable
        out.write("/*rhat*/  \r\n");
         out.write("bin ");
        for (j=0;j<n;j++)
        {if (j==n-1) out.write("rhat"+j+"; ");
        else out.write("rhat"+j+", ");
        } 
          out.write("\r\n");
        
           out.write("/*b*/  \r\n");
          out.write("bin ");
        for (j=0;j<n;j++)
        {
         if (j==n-1) out.write("b"+j+"; ");
         else out.write("b"+j+", ");
        } 
        out.write("\r\n");
        
        
        out.write("/*rbar*/  \r\n");
        out.write("bin ");
        for (i=0;i<n;i++)
        {
            for (j=0;j<n;j++)
        {
           if (j==n-1&& i==n-1) out.write("rbar"+i+j+"; ");
           else out.write("rbar"+i+j+", ");  
              //out.write(" 0 "+"<= "+"rbar"+i+j+ " <= 1 ;");  
         }
        }   
        out.write("\r\n");
        
        
        
        out.write("/*z*/  \r\n");
        out.write("bin ");
        for (i=0;i<n;i++)
        {
            for (j=0;j<n;j++)
        {
           if (j==n-1&& i==n-1) out.write("z"+i+j+"; ");
           else out.write("z"+i+j+", "); 
            //  out.write(" 0 "+"<= "+"z"+i+j+ " <= 1 ;");  
         }
        }  
        out.write("\r\n");
     
       
  //Close the output stream
  out.close();

  
  }catch (Exception e){//Catch exception if any
  System.err.println("Error: " + e.getMessage());
  }
  
 
//  
 
 // begin of checking the ILP result
// { 
//  int[] ilp_ET= new int [n];
//  int[] ilp_RT= new int [n];    
// 
// 
// 
//        File result_file = new File("../experiment/lan18/ilp1//ilp"+l+"_"+n+".lp.html");
//        if (!result_file.isFile())
//            {
//                System.out.println("Check file name");      
//            }  
//        try {
//            Scanner scan = new Scanner(result_file);
//            String line = "";
//
//            float e=0,r=0;
//            int count=0;
//            while (scan.hasNextLine()&&(count!= n-1)) {
//                line = scan.nextLine();
//               
//
//                Pattern p = Pattern.compile("-?[\\d\\.]+");
//                
//                for (int i=0;i<n;i++){
//                   if (line.contains("et"+i)&&(count<=i) ){
//                        Matcher m = p.matcher(line); 
//                        while (m.find()) {
//                        e = Float.parseFloat(m.group());
//                        }
//                        ilp_ET[i]=(int)e;
//                      //  System.out.println(ET[i]);
//                   }  
//                    if (line.contains("rt"+i)&&(count<=i)){
//                        Matcher m = p.matcher(line); 
//                        while (m.find()) {
//                        r = Float.parseFloat(m.group());
//                        }
//                        ilp_RT[i]=(int)r;
//                       // System.out.println(RT[i]);
//                        count=i;
//                       // System.out.println(count);
//                   }  
//                   
//                }
//              }
//            
//         for (int i=0;i<n;i++){
//            // if (ilp_RT[i]<0) {ilp_RT[i]=0;}
//             ilp[l]=ilp[l]+(ilp_ET[i]-ilp_RT[i]-W[i])*W[i];
//         }
//            
//             
//            
//        int khanh=0;     
//            
//                      
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(Scheduling_algorithm_1.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//       }
       
       
       
       
       
       } 
       
       
       
   
       
       
       
       
       
      
       
       
       
       
       
       
    }
    
    
    // example from paper 2
     private static void inputGraph2(Graph graphObject) {
    
    graphObject.nVerts=9;
    
     
     
    //input vertexs
    
    graphObject.vertexList[0]= new Vertex(0,0,0);
    graphObject.vertexList[0].isEntry=true;
    graphObject.vertexList[1]= new Vertex(1,5,1);
    graphObject.vertexList[2]= new Vertex(2,3,1);           
    graphObject.vertexList[3]= new Vertex(3,2,2);          
    graphObject.vertexList[4]= new Vertex(4,3,2);              
    graphObject.vertexList[5]= new Vertex(5,4,1);    
    graphObject.vertexList[6]= new Vertex(6,3,1);            
    graphObject.vertexList[7]= new Vertex(7,4,2); 
    graphObject.vertexList[8]= new Vertex(8,3,1);
    
    
     
       // input edge (communication)
   
    graphObject.addEdge(1, 4, 1);
    graphObject.addEdge(1, 6, 1);
    graphObject.addEdge(3, 2, 1); 
    graphObject.addEdge(7, 8, 1);
    graphObject.addEdge(2, 8, 1);
    
    
    
    }
   
     
    // example from paper 1 
    private static void inputGraph1(Graph graphObject) {
    
    graphObject.nVerts=7;
    
     
     
    //input vertexs
    
    graphObject.vertexList[0]= new Vertex(0,0,0);
    graphObject.vertexList[0].isEntry=true;
    graphObject.vertexList[1]= new Vertex(1,2,2);
    graphObject.vertexList[2]= new Vertex(2,3,2);           
    graphObject.vertexList[3]= new Vertex(3,2,2);          
    graphObject.vertexList[4]= new Vertex(4,2,1);              
    graphObject.vertexList[5]= new Vertex(5,2,2);    
    graphObject.vertexList[6]= new Vertex(6,5,1);
     
       // input edge (communication)
    
    graphObject.addEdge(1, 2, 1);
    graphObject.addEdge(2, 3, 1);
    graphObject.addEdge(2, 6, 1);
    graphObject.addEdge(2, 4, 1);
    graphObject.addEdge(3, 5, 1);
    graphObject.addEdge(4, 5, 1);
    graphObject.addEdge(6, 5, 1); 
    }
     
     
     
     
     
     
     
     private static void constructGraph(Graph graph,String task_string,String value_string) {
        int check = 0;
        int kind=0;
        //replacing this with the reading file function
        //String comm_string = "ab a sd\n sd sd sd\n # type    exec_time\n    0   1.3\n 2   3\n";
        double [] weight = new double[100];
        double [] comm = new double[100];
        double [] task = new double [100];
        double [][] matrix = new double[100][100];
        
        Scanner scan = new Scanner(value_string);
        String line;
        int type = 0,i=0,j=0;
        float f,n;
        
        while (scan.hasNext()){
            line = scan.nextLine();
            if (line.contains("# type version time    weight")){
                while (scan.hasNext()){
                    f = scan.nextFloat();
                    if (i%4==0) {
                        //System.out.print((int)f +" ");
                        type = (int) f;
                    }
                    else {
                        if (i%4==2){
                            comm[type] = f; 
                        } else { if (i%4==3){
                            weight[type]=f;
                        }
                            
                        }
                        
                           
                     
                    }
                    i++;
                }
            }
        }
        
        // add tasks
        scan = new Scanner(task_string);
        i = 0;
        String split[],sub_split[];
        while (scan.hasNextLine()) {
            line = scan.nextLine();
            if (line.contains("TASK ")){
                split = line.split(" "); //should check the number of split is not correct
                
                    kind=Integer.parseInt(split[2],10);
                    
                
                graph.addVertex(i, comm[kind],(int)weight[kind]);
                i++;
                }
        }
        //3-7-9
       
        // add edges
        scan = new Scanner(task_string);
        i = 0;
        int source, dest;
       
        while (scan.hasNextLine()) {
            line = scan.nextLine();
            if (line.contains("ARC ")){
                split = line.split(" ");
                source = Integer.parseInt(split[3].split("_")[1]);
                dest =   Integer.parseInt(split[7].split("_")[1]);
                graph.addEdge(source, dest, 1);
                }
        }
        
        
  
        
        //finding entry task
        for ( i =0; i < graph.nVerts;i++){
            check = 0;
            for ( j = 0; j< graph.nVerts;j++){
                if (graph.adjMat_rev[i][j]!=0){
                    check = 1;
                    break;
                }
            }
            if (check == 0) {
                graph.vertexList[i].isEntry = true;
                System.out.println("Entry task: " + i);
            }
        }
        
        //finding exit task
        for ( i =0; i < graph.nVerts;i++){
            check = 0;
            for ( j = 0; j< graph.nVerts;j++){
                if (graph.adjMat[i][j]!=0){
                    check = 1;
                    break;
                }
            }
            if (check == 0) {
                graph.vertexList[i].isExit = true;
                System.out.println("Exit task: " + i);
            }
        }
        
    }
     // MWD
   private static void inputGraph3(Graph graphObject) {
    
    graphObject.nVerts=9;
    
     
     
    //input vertexs
    
    graphObject.vertexList[0]= new Vertex(0,2,1);
    graphObject.vertexList[0].isEntry=true;
    graphObject.vertexList[1]= new Vertex(1,1,2);
    graphObject.vertexList[2]= new Vertex(2,2,1);           
    graphObject.vertexList[3]= new Vertex(3,1,2);          
    graphObject.vertexList[4]= new Vertex(4,3,1);              
    graphObject.vertexList[5]= new Vertex(5,1,1);    
    graphObject.vertexList[6]= new Vertex(6,2,1);            
    graphObject.vertexList[7]= new Vertex(7,1,2); 
    graphObject.vertexList[8]= new Vertex(8,2,1);
    graphObject.vertexList[9]= new Vertex(9,1,3);
    graphObject.vertexList[10]= new Vertex(10,2,1);
    graphObject.vertexList[11]= new Vertex(11,1,1);
     
       // input edge (communication)
   
    graphObject.addEdge(0, 1, 1);
    graphObject.addEdge(0, 4, 1);
    graphObject.addEdge(1, 2, 1);
    graphObject.addEdge(2, 3, 1); 
    graphObject.addEdge(3, 9, 1);
    graphObject.addEdge(4, 5, 1);
    graphObject.addEdge(4, 6, 1);
    graphObject.addEdge(6, 7, 1);
    graphObject.addEdge(7, 8, 1);
    graphObject.addEdge(8, 9, 1);
    graphObject.addEdge(9, 10, 1);
    graphObject.addEdge(10,11, 1);
    
    
    
    
    }
     
     
     
     
     
     
     
     
}
